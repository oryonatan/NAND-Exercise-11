function Surface.new 0
push constant 6
call Memory.alloc 1
pop pointer 0
push constant 30
pop this 2
push this 2
call Array.new 1
pop this 3
push this 2
call Array.new 1
pop this 4
push this 2
call Array.new 1
pop this 5
push constant 10
pop this 0
push constant 10
pop this 1
push pointer 0
return
function Surface.getUpperDivider 0
push constant 25
return
function Surface.getLowerDivider 0
push constant 250
return
function Surface.init 7
push argument 0
pop pointer 0
push constant 0
pop local 1
push constant 0
pop local 0
push constant 0
pop local 3
label WHILE_COND0
push local 3
not
push local 0
push this 2
lt
and
not
if-goto WHILE_END1
push constant 18
call Utils.random 1
pop local 4
push local 0
push this 4
add
push constant 3
call Utils.random 1
push constant 1
add
push this 1
call Math.multiply 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push this 5
add
call Surface.getLowerDivider 0
push local 4
push this 0
call Math.multiply 2
sub
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 25
call Utils.random 1
pop local 2
push local 0
push this 3
add
push local 1
push local 2
add
push this 1
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push this 3
add
pop pointer 1
push that 0
push constant 490
gt
if-goto IF-TRUE2
goto IF-FALSE3
label IF-TRUE2
push local 0
push constant 1
sub
pop this 2
push constant 0
not
pop local 3
label IF-FALSE3
push local 0
push this 3
add
pop pointer 1
push that 0
pop local 1
push local 0
push constant 1
add
pop local 0
goto WHILE_COND0
label WHILE_END1
push constant 0
return
function Surface.getCannonPosX 0
push argument 0
pop pointer 0
push argument 1
push constant 1
eq
if-goto IF-TRUE4
goto IF-FALSE5
label IF-TRUE4
push argument 2
push this 3
add
pop pointer 1
push that 0
push constant 1
add
return
label IF-FALSE5
push this 2
push constant 1
sub
push argument 2
sub
push this 3
add
pop pointer 1
push that 0
push this 2
push constant 1
sub
push argument 2
sub
push this 4
add
pop pointer 1
push that 0
add
push constant 9
sub
return
function Surface.getCannonPosY 1
push argument 0
pop pointer 0
push argument 1
push constant 1
eq
if-goto IF-TRUE6
goto IF-FALSE7
label IF-TRUE6
push pointer 0
push argument 2
push pointer 0
push constant 1
push argument 2
call Surface.getCannonPosX 3
push constant 1
sub
call Surface.findHeightForCannon 3
pop local 0
push local 0
return
goto IF-EXIT8
label IF-FALSE7
push pointer 0
push this 2
push constant 1
sub
push argument 2
sub
push pointer 0
push constant 2
push argument 2
call Surface.getCannonPosX 3
push constant 1
sub
call Surface.findHeightForCannon 3
pop local 0
push local 0
return
label IF-EXIT8
function Surface.getMinHeight 1
push argument 0
pop pointer 0
push argument 3
push this 2
push constant 1
sub
gt
push argument 3
push constant 0
lt
or
push argument 1
push constant 0
eq
or
if-goto IF-TRUE9
goto IF-FALSE10
label IF-TRUE9
push argument 1
return
label IF-FALSE10
push argument 1
pop local 0
push argument 3
push this 3
add
pop pointer 1
push that 0
push argument 3
push this 4
add
pop pointer 1
push that 0
add
push argument 2
gt
push argument 3
push this 3
add
pop pointer 1
push that 0
push argument 2
push constant 10
add
lt
and
if-goto IF-TRUE11
goto IF-FALSE12
label IF-TRUE11
push argument 3
push this 5
add
pop pointer 1
push that 0
push local 0
call Math.min 2
pop local 0
label IF-FALSE12
push local 0
return
function Surface.findHeightForCannon 2
push argument 0
pop pointer 0
push argument 1
push this 5
add
pop pointer 1
push that 0
pop local 0
push constant 2
neg
pop local 1
label WHILE_COND13
push local 1
push constant 3
lt
not
if-goto WHILE_END14
push pointer 0
push local 0
push argument 2
push argument 1
push local 1
add
call Surface.getMinHeight 4
pop local 0
push local 1
push constant 1
add
pop local 1
goto WHILE_COND13
label WHILE_END14
push local 0
return
function Surface.get_buildingsNum 0
push argument 0
pop pointer 0
push this 2
return
function Surface.dispose 0
push argument 0
pop pointer 0
push this 4
call Array.dispose 1
pop temp 0
push this 5
call Array.dispose 1
pop temp 0
push this 3
call Array.dispose 1
pop temp 0
push pointer 0
call Memory.deAlloc 1
pop temp 0
push constant 0
return
function Surface.drawAllBuildings 1
push argument 0
pop pointer 0
label WHILE_COND15
push local 0
push this 2
lt
not
if-goto WHILE_END16
push pointer 0
push local 0
call Surface.drawBuilding 2
pop temp 0
push local 0
push constant 1
add
pop local 0
goto WHILE_COND15
label WHILE_END16
push constant 0
return
function Surface.isHitBuilding 1
push argument 0
pop pointer 0
push constant 0
pop local 0
label WHILE_COND17
push local 0
push this 2
lt
not
if-goto WHILE_END18
push argument 1
push local 0
push this 3
add
pop pointer 1
push that 0
gt
push argument 1
push local 0
push this 3
add
pop pointer 1
push that 0
push local 0
push this 4
add
pop pointer 1
push that 0
add
lt
and
push argument 2
push local 0
push this 5
add
pop pointer 1
push that 0
gt
and
if-goto IF-TRUE19
goto IF-FALSE20
label IF-TRUE19
push local 0
return
label IF-FALSE20
push local 0
push constant 1
add
pop local 0
goto WHILE_COND17
label WHILE_END18
push constant 1
neg
return
function Surface.drawBuilding 4
push argument 0
pop pointer 0
call Surface.getLowerDivider 0
push argument 1
push this 5
add
pop pointer 1
push that 0
sub
push this 0
call Math.divide 2
pop local 2
push argument 1
push this 4
add
pop pointer 1
push that 0
push this 1
call Math.divide 2
pop local 3
push local 2
push constant 0
eq
push local 3
push constant 0
eq
or
if-goto IF-TRUE21
goto IF-FALSE22
label IF-TRUE21
push constant 0
return
label IF-FALSE22
push argument 1
push this 3
add
pop pointer 1
push that 0
push argument 1
push this 5
add
pop pointer 1
push that 0
push argument 1
push this 3
add
pop pointer 1
push that 0
push argument 1
push this 4
add
pop pointer 1
push that 0
add
call Surface.getLowerDivider 0
call Screen.drawRectangle 4
pop temp 0
push constant 0
call Screen.setColor 1
pop temp 0
push argument 1
push this 3
add
pop pointer 1
push that 0
push constant 1
add
push argument 1
push this 5
add
pop pointer 1
push that 0
push constant 1
add
push argument 1
push this 3
add
pop pointer 1
push that 0
push argument 1
push this 4
add
pop pointer 1
push that 0
add
push constant 1
sub
call Surface.getLowerDivider 0
call Screen.drawRectangle 4
pop temp 0
push constant 0
not
call Screen.setColor 1
pop temp 0
push argument 1
push this 3
add
pop pointer 1
push that 0
push constant 2
add
push argument 1
push this 5
add
pop pointer 1
push that 0
push constant 2
add
push argument 1
push this 3
add
pop pointer 1
push that 0
push argument 1
push this 4
add
pop pointer 1
push that 0
add
push constant 2
sub
call Surface.getLowerDivider 0
call Screen.drawRectangle 4
pop temp 0
push local 2
push constant 1
sub
pop local 2
push local 2
push constant 0
gt
if-goto IF-TRUE23
goto IF-FALSE24
label IF-TRUE23
push constant 0
call Screen.setColor 1
pop temp 0
label WHILE_COND25
push local 0
push local 2
lt
not
if-goto WHILE_END26
push constant 0
pop local 1
label WHILE_COND27
push local 1
push local 3
lt
not
if-goto WHILE_END28
push argument 1
push this 3
add
pop pointer 1
push that 0
push constant 4
add
push local 1
push this 1
call Math.multiply 2
add
push argument 1
push this 5
add
pop pointer 1
push that 0
push constant 4
add
push local 0
push this 0
call Math.multiply 2
add
push argument 1
push this 3
add
pop pointer 1
push that 0
push constant 6
add
push local 1
push this 1
call Math.multiply 2
add
push argument 1
push this 5
add
pop pointer 1
push that 0
push constant 7
add
push local 0
push this 0
call Math.multiply 2
add
call Screen.drawRectangle 4
pop temp 0
push local 1
push constant 1
add
pop local 1
goto WHILE_COND27
label WHILE_END28
push local 0
push constant 1
add
pop local 0
goto WHILE_COND25
label WHILE_END26
push constant 0
not
call Screen.setColor 1
pop temp 0
label IF-FALSE24
push constant 0
return
function Surface.inflictBuildingsDemage 1
push argument 0
pop pointer 0
push constant 0
pop local 0
label WHILE_COND29
push local 0
push this 2
lt
not
if-goto WHILE_END30
push argument 1
push local 0
push this 3
add
pop pointer 1
push that 0
push argument 3
sub
gt
push argument 1
push local 0
push this 3
add
pop pointer 1
push that 0
push local 0
push this 4
add
pop pointer 1
push that 0
add
push argument 3
add
lt
and
push argument 2
push local 0
push this 5
add
pop pointer 1
push that 0
push argument 3
sub
gt
and
if-goto IF-TRUE31
goto IF-FALSE32
label IF-TRUE31
push local 0
push this 5
add
call Surface.getLowerDivider 0
push local 0
push this 5
add
pop pointer 1
push that 0
push this 0
add
call Math.min 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
label IF-FALSE32
push local 0
push constant 1
add
pop local 0
goto WHILE_COND29
label WHILE_END30
push constant 0
return
function Surface.drawBottomAndTopLines 0
push argument 0
pop pointer 0
push constant 0
call Surface.getLowerDivider 0
push constant 511
call Surface.getLowerDivider 0
call Screen.drawLine 4
pop temp 0
push constant 0
call Surface.getUpperDivider 0
push constant 511
call Surface.getUpperDivider 0
call Screen.drawLine 4
pop temp 0
push constant 0
return
