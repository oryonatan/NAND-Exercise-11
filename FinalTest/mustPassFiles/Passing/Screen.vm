function Screen.init 0
push constant 16384
pop static 0
push constant 0
not
pop static 1
call Screen.initBitmaskArray 0
pop temp 0
push constant 0
return
function Screen.initBitmaskArray 2
push constant 16
call Array.new 1
pop static 2
push constant 1
pop local 1
push constant 0
pop local 0
label WHILE_COND0
push local 0
push constant 16
lt
not
if-goto WHILE_END1
push local 0
push static 2
add
push local 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 1
push local 1
add
pop local 1
push local 0
push constant 1
add
pop local 0
goto WHILE_COND0
label WHILE_END1
push constant 0
return
function Screen.clearScreen 1
push static 1
pop local 0
push constant 0
call Screen.setColor 1
pop temp 0
push constant 0
push constant 0
push constant 511
push constant 255
call Screen.drawRectangle 4
pop temp 0
push local 0
call Screen.setColor 1
pop temp 0
push constant 0
return
function Screen.setColor 0
push argument 0
pop static 1
push constant 0
return
function Screen.moduloPower2 0
push argument 0
push argument 1
push constant 1
sub
and
return
function Screen.drawPixel 3
push static 0
push argument 1
push constant 32
call Math.multiply 2
add
push argument 0
push constant 16
call Math.divide 2
add
pop local 0
push argument 0
push constant 16
call Screen.moduloPower2 2
pop local 2
push local 0
call Memory.peek 1
pop local 1
push static 1
if-goto IF-TRUE2
goto IF-FALSE3
label IF-TRUE2
push local 1
push local 2
push static 2
add
pop pointer 1
push that 0
or
pop local 1
goto IF-EXIT4
label IF-FALSE3
push local 1
push local 2
push static 2
add
pop pointer 1
push that 0
not
and
pop local 1
label IF-EXIT4
push local 0
push local 1
call Memory.poke 2
pop temp 0
push constant 0
return
function Screen.drawLine 7
push constant 0
pop local 0
push argument 2
push argument 0
sub
pop local 3
push argument 3
push argument 1
sub
pop local 4
push argument 0
push argument 2
call Math.min 2
pop local 5
push argument 1
push argument 3
call Math.min 2
pop local 6
push local 3
push constant 0
lt
push local 4
push constant 0
gt
and
push local 3
push constant 0
gt
push local 4
push constant 0
lt
and
or
if-goto IF-TRUE5
goto IF-FALSE6
label IF-TRUE5
push local 4
push constant 0
lt
if-goto IF-TRUE7
goto IF-FALSE8
label IF-TRUE7
push argument 0
push argument 1
push local 3
push local 4
call Screen.drawDiagonalLine 4
pop temp 0
goto IF-EXIT9
label IF-FALSE8
push argument 2
push argument 3
push local 3
neg
push local 4
neg
call Screen.drawDiagonalLine 4
pop temp 0
label IF-EXIT9
push constant 0
return
goto IF-EXIT10
label IF-FALSE6
push local 3
call Math.abs 1
pop local 3
push local 4
call Math.abs 1
pop local 4
label IF-EXIT10
push local 4
push constant 0
eq
if-goto IF-TRUE11
goto IF-FALSE12
label IF-TRUE11
push local 5
push local 6
push local 3
call Screen.drawVerticalLineOptimized 3
pop temp 0
push constant 0
return
label IF-FALSE12
push local 3
push constant 0
eq
if-goto IF-TRUE13
goto IF-FALSE14
label IF-TRUE13
push local 5
push local 6
push local 4
call Screen.drawHorizontalLine 3
pop temp 0
push constant 0
return
label IF-FALSE14
label WHILE_COND15
push local 1
push local 3
gt
not
push local 2
push local 4
gt
not
and
not
if-goto WHILE_END16
push local 5
push local 1
add
push local 6
push local 2
add
call Screen.drawPixel 2
pop temp 0
push local 0
push constant 0
lt
if-goto IF-TRUE17
goto IF-FALSE18
label IF-TRUE17
push local 1
push constant 1
add
pop local 1
push local 0
push local 4
add
pop local 0
goto IF-EXIT19
label IF-FALSE18
push local 2
push constant 1
add
pop local 2
push local 0
push local 3
sub
pop local 0
label IF-EXIT19
goto WHILE_COND15
label WHILE_END16
push constant 0
return
function Screen.drawDiagonalLine 3
push constant 0
pop local 0
push constant 0
pop local 1
push constant 0
pop local 2
label WHILE_COND20
push local 1
push argument 2
gt
not
push local 2
push argument 3
lt
not
and
not
if-goto WHILE_END21
push argument 0
push local 1
add
push argument 1
push local 2
add
call Screen.drawPixel 2
pop temp 0
push local 0
push constant 0
lt
if-goto IF-TRUE22
goto IF-FALSE23
label IF-TRUE22
push local 2
push constant 1
sub
pop local 2
push local 0
push argument 2
add
pop local 0
goto IF-EXIT24
label IF-FALSE23
push local 1
push constant 1
add
pop local 1
push local 0
push argument 3
add
pop local 0
label IF-EXIT24
goto WHILE_COND20
label WHILE_END21
push constant 0
return
function Screen.drawHorizontalLine 1
push constant 0
pop local 0
label WHILE_COND25
push local 0
push argument 2
gt
not
not
if-goto WHILE_END26
push argument 0
push argument 1
push local 0
add
call Screen.drawPixel 2
pop temp 0
push local 0
push constant 1
add
pop local 0
goto WHILE_COND25
label WHILE_END26
push constant 0
return
function Screen.drawVerticalLineOptimized 4
push argument 2
push constant 16
lt
if-goto IF-TRUE27
goto IF-FALSE28
label IF-TRUE27
push argument 0
push argument 1
push argument 2
call Screen.drawVerticalLine 3
pop temp 0
push constant 0
return
label IF-FALSE28
push constant 0
pop local 0
push argument 0
push argument 0
push constant 16
call Screen.moduloPower2 2
sub
push constant 16
add
pop local 3
push static 0
push argument 1
push constant 32
call Math.multiply 2
add
push local 3
push constant 16
call Math.divide 2
add
pop local 2
push argument 2
push argument 2
push constant 16
call Screen.moduloPower2 2
sub
push constant 16
sub
pop local 1
push argument 0
push argument 1
push local 3
push argument 0
sub
call Screen.drawVerticalLine 3
pop temp 0
label WHILE_COND29
push local 0
push local 1
lt
not
if-goto WHILE_END30
push local 2
push static 1
call Memory.poke 2
pop temp 0
push local 2
push constant 1
add
pop local 2
push local 0
push constant 16
add
pop local 0
goto WHILE_COND29
label WHILE_END30
push argument 0
push local 1
add
push argument 1
push argument 2
push local 1
sub
call Screen.drawVerticalLine 3
pop temp 0
push constant 0
return
function Screen.drawVerticalLine 1
push constant 0
pop local 0
label WHILE_COND31
push local 0
push argument 2
gt
not
not
if-goto WHILE_END32
push argument 0
push local 0
add
push argument 1
call Screen.drawPixel 2
pop temp 0
push local 0
push constant 1
add
pop local 0
goto WHILE_COND31
label WHILE_END32
push constant 0
return
function Screen.drawRectangle 3
push argument 2
push argument 0
sub
call Math.abs 1
pop local 1
push argument 3
push argument 1
sub
call Math.abs 1
pop local 2
label WHILE_COND33
push local 0
push local 2
lt
not
if-goto WHILE_END34
push argument 0
push argument 1
push local 0
add
push local 1
call Screen.drawVerticalLineOptimized 3
pop temp 0
push local 0
push constant 1
add
pop local 0
goto WHILE_COND33
label WHILE_END34
push constant 0
return
function Screen.drawCircle 3
push argument 2
neg
pop local 0
push argument 2
push argument 2
call Math.multiply 2
pop local 2
label WHILE_COND35
push local 0
push argument 2
gt
not
not
if-goto WHILE_END36
push local 2
push local 0
push local 0
call Math.multiply 2
sub
call Math.sqrt 1
pop local 1
push argument 0
push local 1
sub
push argument 1
push local 0
add
push local 1
push constant 2
call Math.multiply 2
call Screen.drawVerticalLineOptimized 3
pop temp 0
push local 0
push constant 1
add
pop local 0
goto WHILE_COND35
label WHILE_END36
push constant 0
return
